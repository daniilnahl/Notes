### What is ASCII?
ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers, telecommunications equipment, and other devices. It maps characters (letters, digits, symbols) to numerical values that computers can store and manipulate as binary data.
### Why ASCII?
- Computers work with numbers, not text. ASCII bridges this gap by assigning a numeric value to each character, enabling text data to be stored and processed.
- ASCII was crucial in the early days of computing when memory and bandwidth were at a premium because it uses just 7 bits per character, allowing up to **128 unique symbols**.
### How ASCII works?
Each ASCII character is mapped to a number between **0** and **127**. These numbers are then represented in **binary** for computer storage and processing. For instance:
- The uppercase letter **'A'** is represented as **65** in decimal, which is **1000001** in binary.
- The lowercase letter **'a'** is **97** in decimal, or **1100001** in binary.
### Examples (Python)
**Example 1**
```
def is_alpha(char): 
	#Check if char is an uppercase or lowercase letter using ASCII ranges 
	if 65 <= ord(char) <= 90 or 97 <= ord(char) <= 122: 
		return True 
	
	return False 
	
#Test the function 
print(is_alpha('A')) #True 
print(is_alpha('z')) #True 
print(is_alpha('1')) #False
```
**How it works**:
- `ord(char)` gets the ASCII value of the character.
- The range **65–90** corresponds to uppercase letters ('A' to 'Z').
- The range **97–122** corresponds to lowercase letters ('a' to 'z').

**Example 2**
```
def to_upper(char): 
	#Convert lowercase letter to uppercase by subtracting 32 
	if 97 <= ord(char) <= 122: #Check if it's a lowercase letter return
		chr(ord(char) - 32) 
		
	return char #Return the character unchanged if not lowercase 
	
#Test the function 
print(to_upper('a')) # 'A' 
print(to_upper('z')) # 'Z' 
print(to_upper('B')) # 'B' (already uppercase)
```
**How it works**:
- ASCII values of lowercase letters ('a' to 'z') are **32 higher** than their uppercase counterparts ('A' to 'Z').
- `ord(char)` gives the ASCII value, and `chr(value)` converts it back to a character.

**Example 3**
Finding  one letter difference between two strings.
```
def findTheDifference(self, original, modified):
        modified_ascii = 0
        original_ascii = 0

		#Counts the ASCII number sum of original
        for i in range(len(original)): 
            original_ascii += ord(original[i])

		#Counts the ASCII number sum of modified
        for i in range(len(modified)):
            modified_ascii += ord(modified[i])

		#Subtracts the modified sum from original 
		#Since there is only one letter difference then the ASCII SUMs 
		#difference is going to equal that one letter's ASCII value which we 
		#convert to char then string to display in proper format
        return str(chr(modified_ascii - original_ascii))
```

### Limitations of ASCII
- **Limited Characters**: ASCII can only encode 128 symbols, making it unsuitable for non-English text or extended symbols. UTF-8 and other encodings address this limitation.
- **Obsolescence in Complex Text Handling**: Modern applications, especially those handling global languages, require Unicode for full compatibility.

